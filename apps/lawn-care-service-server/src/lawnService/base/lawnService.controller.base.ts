/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LawnServiceService } from "../lawnService.service";
import { LawnServiceCreateInput } from "./LawnServiceCreateInput";
import { LawnService } from "./LawnService";
import { LawnServiceFindManyArgs } from "./LawnServiceFindManyArgs";
import { LawnServiceWhereUniqueInput } from "./LawnServiceWhereUniqueInput";
import { LawnServiceUpdateInput } from "./LawnServiceUpdateInput";
import { ScheduleFindManyArgs } from "../../schedule/base/ScheduleFindManyArgs";
import { Schedule } from "../../schedule/base/Schedule";
import { ScheduleWhereUniqueInput } from "../../schedule/base/ScheduleWhereUniqueInput";

export class LawnServiceControllerBase {
  constructor(protected readonly service: LawnServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LawnService })
  async createLawnService(
    @common.Body() data: LawnServiceCreateInput
  ): Promise<LawnService> {
    return await this.service.createLawnService({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        price: true,
        serviceName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LawnService] })
  @ApiNestedQuery(LawnServiceFindManyArgs)
  async lawnServices(@common.Req() request: Request): Promise<LawnService[]> {
    const args = plainToClass(LawnServiceFindManyArgs, request.query);
    return this.service.lawnServices({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        price: true,
        serviceName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LawnService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async lawnService(
    @common.Param() params: LawnServiceWhereUniqueInput
  ): Promise<LawnService | null> {
    const result = await this.service.lawnService({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        price: true,
        serviceName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LawnService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLawnService(
    @common.Param() params: LawnServiceWhereUniqueInput,
    @common.Body() data: LawnServiceUpdateInput
  ): Promise<LawnService | null> {
    try {
      return await this.service.updateLawnService({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          price: true,
          serviceName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LawnService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLawnService(
    @common.Param() params: LawnServiceWhereUniqueInput
  ): Promise<LawnService | null> {
    try {
      return await this.service.deleteLawnService({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          price: true,
          serviceName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/schedules")
  @ApiNestedQuery(ScheduleFindManyArgs)
  async findSchedules(
    @common.Req() request: Request,
    @common.Param() params: LawnServiceWhereUniqueInput
  ): Promise<Schedule[]> {
    const query = plainToClass(ScheduleFindManyArgs, request.query);
    const results = await this.service.findSchedules(params.id, {
      ...query,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        id: true,

        lawnService: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/schedules")
  async connectSchedules(
    @common.Param() params: LawnServiceWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      schedules: {
        connect: body,
      },
    };
    await this.service.updateLawnService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/schedules")
  async updateSchedules(
    @common.Param() params: LawnServiceWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      schedules: {
        set: body,
      },
    };
    await this.service.updateLawnService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/schedules")
  async disconnectSchedules(
    @common.Param() params: LawnServiceWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      schedules: {
        disconnect: body,
      },
    };
    await this.service.updateLawnService({
      where: params,
      data,
      select: { id: true },
    });
  }
}
