/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LawnService as PrismaLawnService,
  Schedule as PrismaSchedule,
} from "@prisma/client";

export class LawnServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LawnServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.lawnService.count(args);
  }

  async lawnServices<T extends Prisma.LawnServiceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LawnServiceFindManyArgs>
  ): Promise<PrismaLawnService[]> {
    return this.prisma.lawnService.findMany<Prisma.LawnServiceFindManyArgs>(
      args
    );
  }
  async lawnService<T extends Prisma.LawnServiceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LawnServiceFindUniqueArgs>
  ): Promise<PrismaLawnService | null> {
    return this.prisma.lawnService.findUnique(args);
  }
  async createLawnService<T extends Prisma.LawnServiceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LawnServiceCreateArgs>
  ): Promise<PrismaLawnService> {
    return this.prisma.lawnService.create<T>(args);
  }
  async updateLawnService<T extends Prisma.LawnServiceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LawnServiceUpdateArgs>
  ): Promise<PrismaLawnService> {
    return this.prisma.lawnService.update<T>(args);
  }
  async deleteLawnService<T extends Prisma.LawnServiceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LawnServiceDeleteArgs>
  ): Promise<PrismaLawnService> {
    return this.prisma.lawnService.delete(args);
  }

  async findSchedules(
    parentId: string,
    args: Prisma.ScheduleFindManyArgs
  ): Promise<PrismaSchedule[]> {
    return this.prisma.lawnService
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .schedules(args);
  }
}
